name: Ensure Manifest Approval

on:
  pull_request:
    types: [opened, synchronize, reopened, review_requested, edited]
  pull_request_review:
    types: [ submitted ]  # Runs only when a review is submitted

permissions:
  contents: read
  pull-requests: write

jobs:
  require-approval:
    name: Ensure Manifest is Approved
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set Up Gradle
        uses: gradle/gradle-build-action@v3

      - name: Generate Merged AndroidManifest.xml
        run: |
          ./gradlew :app:processDebugManifest
          cp app/build/intermediates/merged_manifests/debug/processDebugManifest/AndroidManifest.xml merged_AndroidManifest.xml

      - name: Check for AndroidManifest.xml Changes
        id: check_manifest
        run: |
          git diff --no-index --word-diff=plain baseline_AndroidManifest.xml merged_AndroidManifest.xml > manifest_diff.txt || true
          if [ -s manifest_diff.txt ]; then
          echo "manifest_changed=true" >> $GITHUB_OUTPUT
          else
          echo "manifest_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Manifest Diff (For Review)
        uses: actions/upload-artifact@v4
        with:
          name: manifest-diff
          path: manifest_diff.txt

      - name: Get PR Approvals (Check for Stale & Authorized Approvals)
        id: check_approvals
        if: steps.check_manifest.outputs.manifest_changed == 'true'  # ‚úÖ Run only if manifest changed
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
              const APPROVERS = ["anikamath2", "rohanghosh-hotstar"]; // Hardcoded approvers
              const { owner, repo, number } = context.issue;
            
              const { data: commits } = await github.rest.pulls.listCommits({
                owner,
                repo,
                pull_number: number
              });
            
              const { data: filesChanged } = await github.rest.pulls.listFiles({
                owner,
                repo,
                pull_number: number
              });
              
              const manifestCommit = commits.reverse().find(async commit => {
              const { data: commitDetails } = await github.rest.repos.getCommit({
                owner,
                repo,
                ref: commit.sha
              });
                return commitDetails.files.some(file => file.filename.includes("AndroidManifest.xml"));
              });
                
              if (!manifestCommit) {
                console.log("‚úÖ No manifest changes detected. Skipping approval check.");
                const fs = require("fs");
                fs.appendFileSync(process.env.GITHUB_OUTPUT, `approved=true\n`);
                return;
              }
            
              // Step 3: Get all PR reviews
              const { data: reviews } = await github.rest.pulls.listReviews({ owner, repo, pull_number: number });
              
              // Step 4: Find valid approvals (submitted AFTER the last manifest change)
              const validApprovals = reviews.filter(r =>
              r.state === "APPROVED" &&
              APPROVERS.includes(r.user.login) &&
              new Date(r.submitted_at) > new Date(manifestCommit.commit.author.date)
              );
            
              // Step 5: Check if PR is still in an approved state
              const { data: prData } = await github.rest.pulls.get({ owner, repo, pull_number: number });
              const prApproved = prData.review_decision === "approved";
            
              // Step 6: Final approval check
              const isApproved = prApproved && validApprovals.length > 0;
            
              console.log(`Final Approval Status: ${isApproved ? "‚úÖ Approved" : "‚ùå Not Approved"}`);
              
              const fs = require("fs");
              fs.appendFileSync(process.env.GITHUB_OUTPUT, `approved=${isApproved}\n`);


      - name: Post PR Comment on Manifest Change
        if: steps.check_manifest.outputs.manifest_changed == 'true' && steps.check_approvals.outputs.approved == 'false'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo, number } = context.issue;
            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: "‚ùå **Manifest changes detected!**\n\nüö® Please take the necessary approvals from authorized reviewers (`anikamath2`, `rohanghosh-hotstar`) before proceeding."
            });

      - name: ‚ùå Fail Workflow if No Approval Found
        if: steps.check_manifest.outputs.manifest_changed == 'true' && steps.check_approvals.outputs.approved == 'false'
        run: |
          echo "‚ùå AndroidManifest.xml has changes but no valid approvals found!"
          echo "üö® Approval required before proceeding!"
          exit 1  # ‚ùå Fails workflow to block PR merge

  update-baseline:
    name: Update Baseline Manifest
    needs: require-approval
    if: needs.require-approval.outputs.manifest_changed == 'true' && needs.require-approval.result == 'success'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Update Baseline Manifest
        run: |
          mv merged_AndroidManifest.xml baseline_AndroidManifest.xml
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add baseline_AndroidManifest.xml
          git commit -m "Update baseline AndroidManifest.xml"
          git push
